import { useForm } from "react-hook-form";

const TodoForm = () => {
  const { register, handleSubmit, setValue } = useForm();
  const [todos, setTodos] = useState([]);

  const onSubmit = (data) => {
    setTodos([...todos, data]);
    setValue("todo", ""); // Limpiar el campo del formulario después de enviar
  };

  return (
    <div>
      <h2>To-Do List</h2>
      <form onSubmit={handleSubmit(onSubmit)}>
        <div>
          <input
            type="text"
            placeholder="Enter todo"
            {...register("todo", { required: true })}
          />
          <button type="submit">Add Todo</button>
        </div>
      </form>

      <h3>Current Todos:</h3>
      <ul>
        {todos.map((todo, index) => (
          <li key={index}>{todo.todo}</li>
        ))}
      </ul>
    </div>
  );
};

export default TodoForm;

/*** */import React, { useState } from 'react';
import { useForm } from 'react-hook-form';

const TodoForm = () => {
  const { register, handleSubmit, setValue } = useForm();
  const [todos, setTodos] = useState([
    { id: 1, todo: 'Hacer la compra' },
    { id: 2, todo: 'Limpiar la casa' },
    { id: 3, todo: 'Terminar el informe' }
  ]);
  const [editTodoId, setEditTodoId] = useState(null);

  const onSubmit = (data) => {
    if (editTodoId) {
      // Si hay un ID de edición, actualizamos la tarea existente
      const updatedTodos = todos.map(todo => {
        if (todo.id === editTodoId) {
          return { id: todo.id, todo: data.todo };
        }
        return todo;
      });
      setTodos(updatedTodos);
      setEditTodoId(null); // Limpiamos el ID de edición
    } else {
      // Si no hay un ID de edición, añadimos una nueva tarea
      const newTodo = { id: todos.length + 1, todo: data.todo };
      setTodos([...todos, newTodo]);
    }
    setValue('todo', ''); // Limpiamos el campo del formulario después de enviar
  };

  const deleteTodo = (id) => {
    const updatedTodos = todos.filter(todo => todo.id !== id);
    setTodos(updatedTodos);
  };

  const editTodo = (id, todo) => {
    setValue('todo', todo);
    setEditTodoId(id);
  };

  return (
    <div>
      <h2>To-Do List</h2>
      <form onSubmit={handleSubmit(onSubmit)}>
        <div>
          <input
            type="text"
            placeholder="Enter todo"
            {...register('todo', { required: true })}
          />
          <button type="submit">{editTodoId ? 'Update Todo' : 'Add Todo'}</button>
        </div>
      </form>

      <h3>Current Todos:</h3>
      <ul>
        {todos.map(todo => (
          <li key={todo.id}>
            {todo.todo}
            <button onClick={() => deleteTodo(todo.id)}>Delete</button>
            <button onClick={() => editTodo(todo.id, todo.todo)}>Edit</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TodoForm;












import { useForm } from "react-hook-form";

function MyForm() {
  const { register, handleSubmit, watch, setValue } = useForm();

  // Capturar el valor del input "nombre"
  const nombreValue = watch("nombre");

  // Manejar cambios en el input "nombre"
  const handleNombreChange = (event) => {
    setValue("nombre", event.target.value);
  };

  // Utilizar el valor capturado
  console.log("Valor de nombre:", nombreValue);

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input
        type="text"
        {...register("nombre")}
        onChange={handleNombreChange}
      />
      <input type="submit" />
    </form>
  );
}
